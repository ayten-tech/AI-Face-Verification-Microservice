#this file Orchestrates app + database together (runs both containers):
#postgressql database and face verification service(application)
#api is accessible at http://localhost:3000
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: face-verification-db
    environment:
      POSTGRES_DB: face_verification_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - face-verification-network

  # Face Verification Microservice
  face-verification-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: face-verification-service
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: face_verification_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      MODEL_PATH: ./models/arcface.onnx
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - face-verification-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  face-verification-network:
    driver: bridge

